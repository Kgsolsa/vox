openapi: 3.0.3
info:
  title: Hono API
  description: API for managing authors and comments.
  version: 1.0.0
servers:
  - url: http://localhost:8787/v1
    description: Local development server

paths:
  /authors:
    get:
      summary: List all authors
      operationId: listAuthors
      tags:
        - Authors
      responses:
        "200":
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Author"

    post:
      summary: Create a new author
      operationId: createAuthor
      tags:
        - Authors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorInput"
      responses:
        "201":
          description: Author created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"

  /authors/{id}:
    get:
      summary: Get an author by ID
      operationId: getAuthor
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Author details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"

    put:
      summary: Update an author
      operationId: updateAuthor
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorInput"
      responses:
        "200":
          description: Author updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Author"

    delete:
      summary: Delete an author
      operationId: deleteAuthor
      tags:
        - Authors
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Author deleted successfully

  /comments:
    get:
      summary: List all comments
      operationId: listComments
      tags:
        - Comments
      responses:
        "200":
          description: A list of comments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Comment"

    post:
      summary: Create a new comment
      operationId: createComment
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentInput"
      responses:
        "201":
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"

  /comments/{id}:
    get:
      summary: Get a comment by ID
      operationId: getComment
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Comment details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Comment"

    delete:
      summary: Delete a comment
      operationId: deleteComment
      tags:
        - Comments
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Comment deleted successfully

components:
  schemas:
    Author:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        external_id:
          type: string

    AuthorInput:
      type: object
      required:
        - name
        - email
        - external_id
      properties:
        name:
          type: string
        email:
          type: string
        external_id:
          type: string

    Comment:
      type: object
      properties:
        id:
          type: string
        author_id:
          type: string
        page_id:
          type: string
        content:
          type: string
        likes_count:
          type: integer
        created_at:
          type: string
          format: date-time

    CommentInput:
      type: object
      required:
        - author_id
        - content
        - page_id
      properties:
        author_id:
          type: string
        content:
          type: string
        page_id:
          type: string
